<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Employee Management</title>
    <link href="https://fonts.googleapis.com/css2?family=Lato&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" rel="stylesheet">
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        primary: {
                            50: '#f3f1ff',
                            100: '#e9e5ff',
                            500: '#7341ff',
                            600: '#631bff',
                            700: '#611bf8'
                        }
                    }
                }
            }
        };

        // Mock data for demo
        const departments = ['IT', 'HR', 'Finance', 'Marketing', 'Sales'];
        const statuses = ['Active', 'Inactive', 'OnLeave'];

        const employees = [
            { id: 1, firstName: 'Test1', lastName: 'DADA', email: 'Test1@gmail.com', department: 'IT', position: 'Developer', status: 'Active', profileImage: 'https://th.bing.com/th/id/R.03f137aa3456f51c9f62d9e876e7a9ff?rik=tMY5NiYPQWnnkg&riu=http%3a%2f%2fgetwallpapers.com%2fwallpaper%2ffull%2fd%2f1%2fe%2f1129346-cute-cats-wallpaper-1080x1920-full-hd.jpg&ehk=%2fJcdRdco6dASg87GmgQEx5VyEz7bYP%2fM%2bGHwd2mq20g%3d&risl=&pid=ImgRaw&r=0' },
            { id: 2, firstName: 'Test2', lastName: 'DADA2', email: 'Test1@gmail.com', department: 'HR', position: 'Manager', status: 'Active', profileImage: 'https://img.freepik.com/premium-photo/cute-cat-wallpapers-kitten-photo-ai-generated_980993-2093.jpg' },
            { id: 3, firstName: 'Test3', lastName: 'DADA3', email: 'Test1@gmail.com', department: 'Finance', position: 'Analyst', status: 'OnLeave', profileImage: 'https://images.fineartamerica.com/images/artworkimages/mediumlarge/1/little-cute-kitten-serhii-kucher.jpg' },
            { id: 4, firstName: 'Test4', lastName: 'DADA4', email: 'Test1@gmail.com', department: 'Marketing', position: 'Specialist', status: 'Inactive', profileImage: 'https://images.fineartamerica.com/images/artworkimages/mediumlarge/1/little-cute-kitten-serhii-kucher.jpg' },
            { id: 5, firstName: 'Test5', lastName: 'DADA5', email: 'Test1@gmail.com', department: 'Sales', position: 'Representative', status: 'Active', profileImage: 'https://images.fineartamerica.com/images/artworkimages/mediumlarge/1/little-cute-kitten-serhii-kucher.jpg' },
        ];

        let filteredEmployees = [...employees];
        let currentFilters = {
            searchTerm: '',
            departments: [],
            statuses: []
        };
    </script>
</head>
<body>
    <div class="w-full max-w-7xl mx-auto p-6 bg-white">
        <!-- Header -->
        <div class="mb-8">
            <h1 class="text-3xl font-bold text-gray-900 mb-2">Employee Management</h1>
            <p class="text-gray-600">Manage your team members and their information</p>
        </div>

        <!-- Search and Filters -->
        <div class="flex flex-col lg:flex-row gap-6 mb-6">
            <!-- Search Input -->
            <div class="flex-1 relative">
                <span class="material-symbols-outlined absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400">search</span>
                <input type="text" id="searchInput" placeholder="Search employees..."
                       class="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent transition-all duration-200"
                       onkeyup="debounceSearch()" />
            </div>

            <div class="flex flex-col sm:flex-row gap-3">
                <!-- Department Filter -->
                <div class="relative">
                    <button type="button" onclick="toggleDropdown('department')"
                            class="flex items-center gap-2 px-4 py-3 bg-gray-50 border border-gray-300 rounded-lg cursor-pointer hover:bg-gray-100 transition-colors duration-200">
                        <span class="material-symbols-outlined">filter_list</span>
                        <span id="department-label">Department</span>
                        <span class="material-symbols-outlined ml-auto">expand_more</span>
                    </button>
                    <div id="department-dropdown" class="hidden absolute top-full left-0 mt-2 w-48 bg-white border border-gray-200 rounded-lg shadow-lg z-10">
                        <div class="p-2">
                            <div class="mb-2">
                                <button type="button" onclick="clearDepartmentFilters()" class="text-xs text-primary-600 hover:text-primary-700">Clear All</button>
                            </div>
                            <div id="department-checkboxes">
                                <!-- Will be populated by JavaScript -->
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Status Filter -->
                <div class="relative">
                    <button type="button" onclick="toggleDropdown('status')"
                            class="flex items-center gap-2 px-4 py-3 bg-gray-50 border border-gray-300 rounded-lg cursor-pointer hover:bg-gray-100 transition-colors duration-200">
                        <span class="material-symbols-outlined">work</span>
                        <span id="status-label">Status</span>
                        <span class="material-symbols-outlined ml-auto">expand_more</span>
                    </button>
                    <div id="status-dropdown" class="hidden absolute top-full left-0 mt-2 w-48 bg-white border border-gray-200 rounded-lg shadow-lg z-10">
                        <div class="p-2">
                            <div class="mb-2">
                                <button type="button" onclick="clearStatusFilters()" class="text-xs text-primary-600 hover:text-primary-700">Clear All</button>
                            </div>
                            <div id="status-checkboxes">
                                <!-- Will be populated by JavaScript -->
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Add Employee Button -->
                <button type="button" onclick="showAddEmployeeModal()"
                        class="flex items-center gap-2 px-6 py-3 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors duration-200 shadow-md hover:shadow-lg">
                    <span class="material-symbols-outlined">add</span>
                    Add Employee
                </button>
            </div>
        </div>

        <!-- Active Filters Display -->
        <div id="active-filters" class="mb-4 hidden">
            <div class="flex flex-wrap gap-2 items-center">
                <span class="text-sm text-gray-600">Active filters:</span>
                <div id="filter-tags" class="flex flex-wrap gap-2">
                    <!-- Filter tags will be populated by JavaScript -->
                </div>
                <button onclick="clearAllFilters()" class="text-sm text-primary-600 hover:text-primary-700 ml-2">Clear all</button>
            </div>
        </div>

        <!-- Employee Table -->
        <div class="bg-white rounded-lg border border-gray-200 overflow-hidden shadow-sm">
            <div class="overflow-x-auto">
                <table class="w-full">
                    <thead class="bg-gray-50 border-b border-gray-200">
                        <tr>
                            <th class="text-left py-4 px-6 font-semibold text-gray-900">
                                <input type="checkbox" class="rounded" />
                            </th>
                            <th class="text-left py-4 px-6 font-semibold text-gray-900">Employee</th>
                            <th class="text-left py-4 px-6 font-semibold text-gray-900">Department</th>
                            <th class="text-left py-4 px-6 font-semibold text-gray-900">Position</th>
                            <th class="text-left py-4 px-6 font-semibold text-gray-900">Status</th>
                            <th class="text-left py-4 px-6 font-semibold text-gray-900">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="employee-table-body" class="divide-y divide-gray-200">
                        <!-- Will be populated by JavaScript -->
                    </tbody>
                </table>
            </div>
        </div>

        <!-- No Results Message -->
        <div id="no-results" class="hidden text-center py-8">
            <span class="material-symbols-outlined text-gray-400 text-6xl mb-4">search_off</span>
            <p class="text-gray-600">No employees found matching your criteria.</p>
        </div>

        <!-- Results Info -->
        <div id="results-info" class="flex flex-col sm:flex-row items-center justify-between mt-6 gap-4">
            <div class="text-sm text-gray-700">
                Showing <span id="results-count">0</span> results
            </div>
        </div>
    </div>

    <!-- Employee Modal (Add/View/Edit) -->
    <div id="employee-modal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden flex items-center justify-center">
        <div class="bg-white rounded-lg shadow-xl border border-gray-200 p-6 w-full max-w-2xl mx-4 max-h-[90vh] overflow-y-auto">
            <div class="flex items-center justify-between mb-6">
                <h2 id="modal-title" class="text-xl font-semibold text-gray-900">Add New Employee</h2>
                <button onclick="hideEmployeeModal()" class="p-2 text-gray-400 hover:text-gray-600 rounded-lg transition-colors duration-200">
                    <span class="material-symbols-outlined">close</span>
                </button>
            </div>

            <!-- View Mode -->
            <div id="view-mode" class="hidden">
                <div class="space-y-6">
                    <div class="flex items-center gap-4 pb-4 border-b">
                        <img id="view-profile-image" src="" alt="" class="w-16 h-16 rounded-full object-cover" />
                        <div>
                            <h3 id="view-full-name" class="text-xl font-semibold text-gray-900"></h3>
                            <p id="view-email" class="text-gray-600"></p>
                        </div>
                    </div>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Department</label>
                            <p id="view-department" class="text-gray-900"></p>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Position</label>
                            <p id="view-position" class="text-gray-900"></p>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Status</label>
                            <span id="view-status" class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium"></span>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Employee ID</label>
                            <p id="view-employee-id" class="text-gray-900"></p>
                        </div>
                    </div>
                </div>
                <div class="flex justify-end gap-3 pt-6 border-t mt-6">
                    <button onclick="hideEmployeeModal()" class="px-4 py-2 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors duration-200">
                        Close
                    </button>
                    <button onclick="switchToEditMode()" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200">
                        Edit Employee
                    </button>
                </div>
            </div>

            <!-- Form Mode (Add/Edit) -->
            <div id="form-mode">
                <form id="employee-form" class="space-y-4">
                    <input type="hidden" id="employee-id" name="id" />
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">First Name</label>
                            <input type="text" id="first-name" name="firstName" required
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent" />
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Last Name</label>
                            <input type="text" id="last-name" name="lastName" required
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent" />
                        </div>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Email</label>
                        <input type="email" id="email" name="email" required
                               class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent" />
                    </div>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Department</label>
                            <select id="department" name="department" required
                                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent">
                                <option value="">Select Department</option>
                                <!-- Will be populated by JavaScript -->
                            </select>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Position</label>
                            <input type="text" id="position" name="position" required
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent" />
                        </div>
                    </div>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Status</label>
                            <select id="status" name="status" required
                                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent">
                                <option value="Active">Active</option>
                                <option value="Inactive">Inactive</option>
                                <option value="OnLeave">On Leave</option>
                            </select>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Profile Image URL</label>
                            <input type="url" id="profile-image" name="profileImage"
                                   placeholder="https://example.com/image.jpg"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent" />
                        </div>
                    </div>
                    <div class="flex justify-end gap-3 pt-4">
                        <button type="button" onclick="hideEmployeeModal()"
                                class="px-4 py-2 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors duration-200">
                            Cancel
                        </button>
                        <button type="submit" id="submit-btn"
                                class="px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors duration-200">
                            Add Employee
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script>
        let searchTimeout;

        // Initialize the page
        document.addEventListener('DOMContentLoaded', function() {
            initializeFilters();
            renderEmployees();
        });

        function initializeFilters() {
            // Populate department checkboxes
            const departmentContainer = document.getElementById('department-checkboxes');
            departments.forEach(dept => {
                const label = document.createElement('label');
                label.className = 'flex items-center gap-2 p-2 hover:bg-gray-50 rounded cursor-pointer';
                label.innerHTML = `
                    <input type="checkbox" value="${dept}" class="rounded department-checkbox" onchange="updateDepartmentFilter()" />
                    <span>${dept}</span>
                `;
                departmentContainer.appendChild(label);
            });

            // Populate status checkboxes
            const statusContainer = document.getElementById('status-checkboxes');
            statuses.forEach(status => {
                const label = document.createElement('label');
                label.className = 'flex items-center gap-2 p-2 hover:bg-gray-50 rounded cursor-pointer';
                const displayText = status === 'OnLeave' ? 'On Leave' : status;
                label.innerHTML = `
                    <input type="checkbox" value="${status}" class="rounded status-checkbox" onchange="updateStatusFilter()" />
                    <span>${displayText}</span>
                `;
                statusContainer.appendChild(label);
            });

            // Populate department options in modal
            const departmentSelect = document.getElementById('department');
            departments.forEach(dept => {
                const option = document.createElement('option');
                option.value = dept;
                option.textContent = dept;
                departmentSelect.appendChild(option);
            });
        }

        let currentModalMode = 'add'; // 'add', 'view', 'edit'
        let currentEmployeeId = null;

        function debounceSearch() {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(() => {
                currentFilters.searchTerm = document.getElementById('searchInput').value.toLowerCase();
                applyFilters();
            }, 300);
        }

        function updateDepartmentFilter() {
            const checkboxes = document.querySelectorAll('.department-checkbox:checked');
            currentFilters.departments = Array.from(checkboxes).map(cb => cb.value);
            updateFilterLabel('department');
            applyFilters();
        }

        function updateStatusFilter() {
            const checkboxes = document.querySelectorAll('.status-checkbox:checked');
            currentFilters.statuses = Array.from(checkboxes).map(cb => cb.value);
            updateFilterLabel('status');
            applyFilters();
        }

        function updateFilterLabel(type) {
            const label = document.getElementById(`${type}-label`);
            const count = currentFilters[type + 's'].length;
            if (count === 0) {
                label.textContent = type.charAt(0).toUpperCase() + type.slice(1);
            } else {
                label.textContent = `${type.charAt(0).toUpperCase() + type.slice(1)} (${count})`;
            }
        }

        function clearDepartmentFilters() {
            document.querySelectorAll('.department-checkbox').forEach(cb => cb.checked = false);
            currentFilters.departments = [];
            updateFilterLabel('department');
            applyFilters();
        }

        function clearStatusFilters() {
            document.querySelectorAll('.status-checkbox').forEach(cb => cb.checked = false);
            currentFilters.statuses = [];
            updateFilterLabel('status');
            applyFilters();
        }

        function clearAllFilters() {
            document.getElementById('searchInput').value = '';
            clearDepartmentFilters();
            clearStatusFilters();
            currentFilters.searchTerm = '';
            applyFilters();
        }

        function applyFilters() {
            filteredEmployees = employees.filter(employee => {
                // Search filter
                if (currentFilters.searchTerm) {
                    const searchMatch =
                        employee.firstName.toLowerCase().includes(currentFilters.searchTerm) ||
                        employee.lastName.toLowerCase().includes(currentFilters.searchTerm) ||
                        employee.email.toLowerCase().includes(currentFilters.searchTerm) ||
                        employee.position.toLowerCase().includes(currentFilters.searchTerm);
                    if (!searchMatch) return false;
                }

                // Department filter
                if (currentFilters.departments.length > 0) {
                    if (!currentFilters.departments.includes(employee.department)) return false;
                }

                // Status filter
                if (currentFilters.statuses.length > 0) {
                    if (!currentFilters.statuses.includes(employee.status)) return false;
                }

                return true;
            });

            renderEmployees();
            updateActiveFiltersDisplay();
        }

        function updateActiveFiltersDisplay() {
            const activeFiltersDiv = document.getElementById('active-filters');
            const filterTagsDiv = document.getElementById('filter-tags');

            let hasActiveFilters = false;
            filterTagsDiv.innerHTML = '';

            // Search term tag
            if (currentFilters.searchTerm) {
                hasActiveFilters = true;
                filterTagsDiv.innerHTML += `
                    <span class="inline-flex items-center gap-1 px-2 py-1 bg-primary-100 text-primary-800 text-xs rounded-full">
                        Search: "${currentFilters.searchTerm}"
                        <button onclick="clearSearchFilter()" class="ml-1 text-primary-600 hover:text-primary-800">×</button>
                    </span>
                `;
            }

            // Department tags
            currentFilters.departments.forEach(dept => {
                hasActiveFilters = true;
                filterTagsDiv.innerHTML += `
                    <span class="inline-flex items-center gap-1 px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">
                        ${dept}
                        <button onclick="removeDepartmentFilter('${dept}')" class="ml-1 text-blue-600 hover:text-blue-800">×</button>
                    </span>
                `;
            });

            // Status tags
            currentFilters.statuses.forEach(status => {
                hasActiveFilters = true;
                const displayText = status === 'OnLeave' ? 'On Leave' : status;
                filterTagsDiv.innerHTML += `
                    <span class="inline-flex items-center gap-1 px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full">
                        ${displayText}
                        <button onclick="removeStatusFilter('${status}')" class="ml-1 text-green-600 hover:text-green-800">×</button>
                    </span>
                `;
            });

            activeFiltersDiv.classList.toggle('hidden', !hasActiveFilters);
        }

        function clearSearchFilter() {
            document.getElementById('searchInput').value = '';
            currentFilters.searchTerm = '';
            applyFilters();
        }

        function removeDepartmentFilter(dept) {
            currentFilters.departments = currentFilters.departments.filter(d => d !== dept);
            document.querySelector(`.department-checkbox[value="${dept}"]`).checked = false;
            updateFilterLabel('department');
            applyFilters();
        }

        function removeStatusFilter(status) {
            currentFilters.statuses = currentFilters.statuses.filter(s => s !== status);
            document.querySelector(`.status-checkbox[value="${status}"]`).checked = false;
            updateFilterLabel('status');
            applyFilters();
        }

        function renderEmployees() {
            const tbody = document.getElementById('employee-table-body');
            const noResults = document.getElementById('no-results');
            const resultsInfo = document.getElementById('results-info');
            const table = tbody.closest('table').parentElement.parentElement;

            if (filteredEmployees.length === 0) {
                table.style.display = 'none';
                noResults.classList.remove('hidden');
                resultsInfo.style.display = 'none';
            } else {
                table.style.display = 'block';
                noResults.classList.add('hidden');
                resultsInfo.style.display = 'flex';
            }

            tbody.innerHTML = '';

            filteredEmployees.forEach(employee => {
                const statusClass = getStatusClass(employee.status);
                const statusText = employee.status === 'OnLeave' ? 'On Leave' : employee.status;

                const row = document.createElement('tr');
                row.className = 'hover:bg-gray-50 transition-colors duration-150';
                row.innerHTML = `
                    <td class="py-4 px-6">
                        <input type="checkbox" class="rounded" />
                    </td>
                    <td class="py-4 px-6">
                        <div class="flex items-center gap-3">
                            <img src="${employee.profileImage}" alt="${employee.firstName} ${employee.lastName}"
                                 class="w-10 h-10 rounded-full object-cover" />
                            <div>
                                <div class="font-semibold text-gray-900">${employee.firstName} ${employee.lastName}</div>
                                <div class="text-sm text-gray-500">${employee.email}</div>
                            </div>
                        </div>
                    </td>
                    <td class="py-4 px-6 text-gray-900">${employee.department}</td>
                    <td class="py-4 px-6 text-gray-900">${employee.position}</td>
                    <td class="py-4 px-6">
                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${statusClass}">
                            ${statusText}
                        </span>
                    </td>
                    <td class="py-4 px-6">
                        <div class="flex items-center gap-2">
                            <button onclick="viewEmployee(${employee.id})"
                                   class="p-2 text-gray-600 hover:text-primary-600 hover:bg-primary-50 rounded-lg transition-all duration-200">
                                <span class="material-symbols-outlined">visibility</span>
                            </button>
                            <button onclick="editEmployee(${employee.id})"
                                   class="p-2 text-gray-600 hover:text-blue-600 hover:bg-blue-50 rounded-lg transition-all duration-200">
                                <span class="material-symbols-outlined">edit</span>
                            </button>
                            <button onclick="deleteEmployee(${employee.id})"
                                    class="p-2 text-gray-600 hover:text-red-600 hover:bg-red-50 rounded-lg transition-all duration-200">
                                <span class="material-symbols-outlined">delete</span>
                            </button>
                        </div>
                    </td>
                `;
                tbody.appendChild(row);
            });

            document.getElementById('results-count').textContent = filteredEmployees.length;
        }

        function getStatusClass(status) {
            switch(status) {
                case 'Active': return 'bg-green-100 text-green-800';
                case 'Inactive': return 'bg-red-100 text-red-800';
                case 'OnLeave': return 'bg-yellow-100 text-yellow-800';
                default: return 'bg-gray-100 text-gray-800';
            }
        }

        function toggleDropdown(type) {
            const dropdown = document.getElementById(type + '-dropdown');
            dropdown.classList.toggle('hidden');
        }

        function showAddEmployeeModal() {
            currentModalMode = 'add';
            currentEmployeeId = null;
            document.getElementById('modal-title').textContent = 'Add New Employee';
            document.getElementById('submit-btn').textContent = 'Add Employee';
            document.getElementById('view-mode').classList.add('hidden');
            document.getElementById('form-mode').classList.remove('hidden');
            document.getElementById('employee-form').reset();
            document.getElementById('employee-modal').classList.remove('hidden');
        }

        function showViewEmployeeModal(employee) {
            currentModalMode = 'view';
            currentEmployeeId = employee.id;
            document.getElementById('modal-title').textContent = 'Employee Details';

            // Populate view mode data
            document.getElementById('view-profile-image').src = employee.profileImage;
            document.getElementById('view-profile-image').alt = `${employee.firstName} ${employee.lastName}`;
            document.getElementById('view-full-name').textContent = `${employee.firstName} ${employee.lastName}`;
            document.getElementById('view-email').textContent = employee.email;
            document.getElementById('view-department').textContent = employee.department;
            document.getElementById('view-position').textContent = employee.position;
            document.getElementById('view-employee-id').textContent = `#${employee.id}`;

            const statusSpan = document.getElementById('view-status');
            const statusText = employee.status === 'OnLeave' ? 'On Leave' : employee.status;
            statusSpan.textContent = statusText;
            statusSpan.className = `inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusClass(employee.status)}`;

            document.getElementById('view-mode').classList.remove('hidden');
            document.getElementById('form-mode').classList.add('hidden');
            document.getElementById('employee-modal').classList.remove('hidden');
        }

        function showEditEmployeeModal(employee) {
            currentModalMode = 'edit';
            currentEmployeeId = employee.id;
            document.getElementById('modal-title').textContent = 'Edit Employee';
            document.getElementById('submit-btn').textContent = 'Update Employee';

            // Populate form with employee data
            document.getElementById('employee-id').value = employee.id;
            document.getElementById('first-name').value = employee.firstName;
            document.getElementById('last-name').value = employee.lastName;
            document.getElementById('email').value = employee.email;
            document.getElementById('department').value = employee.department;
            document.getElementById('position').value = employee.position;
            document.getElementById('status').value = employee.status;
            document.getElementById('profile-image').value = employee.profileImage;

            document.getElementById('view-mode').classList.add('hidden');
            document.getElementById('form-mode').classList.remove('hidden');
            document.getElementById('employee-modal').classList.remove('hidden');
        }

        function switchToEditMode() {
            const employee = employees.find(emp => emp.id === currentEmployeeId);
            if (employee) {
                showEditEmployeeModal(employee);
            }
        }

        function hideEmployeeModal() {
            document.getElementById('employee-modal').classList.add('hidden');
            document.getElementById('employee-form').reset();
            currentModalMode = 'add';
            currentEmployeeId = null;
        }

        function viewEmployee(id) {
            const employee = employees.find(emp => emp.id === id);
            if (employee) {
                showViewEmployeeModal(employee);
            }
        }

        function editEmployee(id) {
            const employee = employees.find(emp => emp.id === id);
            if (employee) {
                showEditEmployeeModal(employee);
            }
        }

        function deleteEmployee(id) {
            if (confirm('Are you sure you want to delete this employee?')) {
                // Remove from employees array
                const index = employees.findIndex(emp => emp.id === id);
                if (index > -1) {
                    employees.splice(index, 1);
                    applyFilters(); // Reapply filters to update the view
                    showNotification('Employee deleted successfully', 'success');
                }
            }
        }

        // Handle form submission
        document.getElementById('employee-form').addEventListener('submit', function(e) {
            e.preventDefault();
            const formData = new FormData(e.target);

            if (currentModalMode === 'add') {
                // Add new employee
                const newEmployee = {
                    id: Math.max(...employees.map(emp => emp.id)) + 1,
                    firstName: formData.get('firstName'),
                    lastName: formData.get('lastName'),
                    email: formData.get('email'),
                    department: formData.get('department'),
                    position: formData.get('position'),
                    status: formData.get('status') || 'Active',
                    profileImage: formData.get('profileImage') || 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=40&h=40&fit=crop&crop=face'
                };

                employees.push(newEmployee);
                applyFilters();
                hideEmployeeModal();
                showNotification('Employee added successfully', 'success');

            } else if (currentModalMode === 'edit') {
                // Update existing employee
                const employeeIndex = employees.findIndex(emp => emp.id === currentEmployeeId);
                if (employeeIndex > -1) {
                    employees[employeeIndex] = {
                        ...employees[employeeIndex],
                        firstName: formData.get('firstName'),
                        lastName: formData.get('lastName'),
                        email: formData.get('email'),
                        department: formData.get('department'),
                        position: formData.get('position'),
                        status: formData.get('status'),
                        profileImage: formData.get('profileImage') || employees[employeeIndex].profileImage
                    };

                    applyFilters();
                    hideEmployeeModal();
                    showNotification('Employee updated successfully', 'success');
                }
            }
        });

        function showNotification(message, type = 'info') {
            // Create notification element
            const notification = document.createElement('div');
            notification.className = `fixed top-4 right-4 z-50 p-4 rounded-lg shadow-lg text-white transition-all duration-300 transform translate-x-full`;

            if (type === 'success') {
                notification.classList.add('bg-green-500');
            } else if (type === 'error') {
                notification.classList.add('bg-red-500');
            } else {
                notification.classList.add('bg-blue-500');
            }

            notification.innerHTML = `
                <div class="flex items-center gap-2">
                    <span class="material-symbols-outlined">
                        ${type === 'success' ? 'check_circle' : type === 'error' ? 'error' : 'info'}
                    </span>
                    <span>${message}</span>
                </div>
            `;

            document.body.appendChild(notification);

            // Slide in
            setTimeout(() => {
                notification.classList.remove('translate-x-full');
            }, 100);

            // Slide out and remove
            setTimeout(() => {
                notification.classList.add('translate-x-full');
                setTimeout(() => {
                    document.body.removeChild(notification);
                }, 300);
            }, 3000);
        }

        // Close dropdowns when clicking outside
        document.addEventListener('click', function(event) {
            const departmentDropdown = document.getElementById('department-dropdown');
            const statusDropdown = document.getElementById('status-dropdown');

            if (!event.target.closest('[onclick="toggleDropdown(\'department\')"]') && !departmentDropdown.contains(event.target)) {
                departmentDropdown.classList.add('hidden');
            }

            if (!event.target.closest('[onclick="toggleDropdown(\'status\')"]') && !statusDropdown.contains(event.target)) {
                statusDropdown.classList.add('hidden');
            }
        });
    </script>
</body>
</html>